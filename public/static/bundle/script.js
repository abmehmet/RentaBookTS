(()=>{"use strict";var t={221:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DataBase=void 0;const n=o(758),r=o(51);e.DataBase=class{constructor(){this._books=new Array,this._stocks=new Array,this._customers=new Array,this._sales=new Array,this._rents=new Array,this._bookSpecifications=new Array,this._cancels=new Array,this._saleCart=new r.SaleCart,this._rentCart=new n.RentCart}get getBooksList(){return this._books}get getStocksList(){return this._stocks}get getCustomersList(){return this._customers}get getSalesList(){return this._sales}get getRents(){return this._rents}get getBookSpecifications(){return this._bookSpecifications}get getCancaledSales(){return this._cancels}get getSaleCart(){return this._saleCart}get getRentCart(){return this._rentCart}set setSaleCart(t){this._saleCart=t}set setRentCart(t){this._rentCart=t}}},333:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BookPrice=void 0,e.BookPrice=class{get id(){return this._id}set id(t){this._id=t}get price(){return this._price}get startDate(){return this._startDate}get endDate(){return this._endDate}set price(t){this._price=t}set startDate(t){this._startDate=t}set endDate(t){this._endDate=t}}},934:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Book=void 0,e.Book=class{constructor(t,e,o,n,r,i){this._name=e,this._author=o,this._isbn=t,this._publishYear=n,this._pages=r,this._bookPrice=i}get id(){return this._id}set id(t){this._id=t}get isbn(){return this._isbn}get name(){return this._name}get author(){return this._author}get publishYear(){return this._publishYear}get pages(){return this._pages}get bookPrice(){return this._bookPrice}set isbn(t){this._isbn=t}set name(t){this._name=t}set author(t){this._author=t}set publishYear(t){this._publishYear=t}set pages(t){this._pages=t}set bookPrice(t){this._bookPrice=t}}},916:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Customer=void 0,e.Customer=class{constructor(t,e,o){this._name=t,this._surName=e,this._phoneNumber=o}get name(){return this._name}get surName(){return this._surName}get phoneNumber(){return this._phoneNumber}set name(t){this._name=t}set surName(t){this._surName=t}set phoneNumber(t){this._phoneNumber=t}}},767:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OrderBookItems=void 0,e.OrderBookItems=class{constructor(t,e){this._book=t,this._quantity=e}get book(){return this._book}get quantity(){return this._quantity}set book(t){this._book=t}set quantity(t){this._quantity=t}toJSON(){return{book:this._book,quantity:this._quantity}}}},758:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RentCart=void 0,e.RentCart=class{constructor(){this.orderBookItems=new Array}}},961:(t,e,o)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Rent=void 0;const n=o(354);class r extends n.Sale{constructor(t,e,o,n,r,i,a){super(t,o,e,n,r),this._refundDate=i,this._refund=a}get refundDate(){return this._refundDate}get refund(){return this._refund}set refundDate(t){this._refundDate=t}set refund(t){this._refund=t}}e.Rent=r},51:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SaleCart=void 0,e.SaleCart=class{constructor(){this.orderBookItems=new Array}}},354:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Sale=void 0,e.Sale=class{constructor(t,e,o,n,r){this._orderBookItems=t,this._customerId=e,this._operationDateTime=o,this._operationNumber=n,this._total=r}get orderBookItems(){return this._orderBookItems}get customerId(){return this._customerId}get operationDateTime(){return this._operationDateTime}get operationNumber(){return this._operationNumber}get total(){return this._total}set orderBookItems(t){this._orderBookItems=t}set customerId(t){this._customerId=t}set operationDateTime(t){this._operationDateTime=t}set operationNumber(t){this._operationNumber=t}set total(t){this._total=t}}},72:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Stock=void 0,e.Stock=class{constructor(t,e,o){this._quantity=t,this._shelfNumber=e,this._book=o}get id(){return this._id}set id(t){this._id=t}get book(){return this._book}set book(t){this._book=t}get quantity(){return this._quantity}get shelfNumber(){return this._shelfNumber}set quantity(t){this._quantity=t}set shelfNumber(t){this._shelfNumber=t}}},607:function(t,e,o){var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.stockService=e.saleService=e.rentService=e.cancelService=e.customerService=e.bookService=void 0;const r=o(221),i=o(934),a=o(333),s=o(916),c=o(961),l=o(767),u=o(72),d=o(946),h=o(943),m=o(709),k=o(148),p=o(478),f=o(214);function v(){return n(this,void 0,void 0,(function*(){e.bookService.bookList=yield e.bookService.getAllBooksData(),e.stockService.stockList=yield e.stockService.getAllStocksData(),console.log(e.bookService.bookList),console.log(e.stockService.stockList)}))}function g(t,e){const o=document.getElementById(e),n=document.getElementById(t);o&&n&&n.addEventListener("click",(()=>{"none"===o.style.display?o.style.display="block":o.style.display="none"}))}var y;y=new r.DataBase,e.bookService=new d.BookService(y.getBooksList,y.getBookSpecifications),e.customerService=new m.CustomerService(y.getCustomersList),e.cancelService=new h.CancelService(y.getCancaledSales),e.rentService=new k.RentService(y.getRents,y.getRentCart),e.saleService=new p.SaleService(y.getSalesList,y.getSaleCart),e.stockService=new f.StockService(y.getStocksList),console.log("Services intiliazed."),e.customerService.addCustomer(new s.Customer("","","")),e.customerService.addCustomer(new s.Customer("","","")),v(),g("addBookMenuItem","addBookSection"),g("showBooksMenuItem","listBooksSection"),g("addCustomerMenuItem","addCustomerSection"),g("addStockMenuItem","addStockSection"),g("saleBookMenuItem","saleBookSection"),g("rentBookMenuItem","rentBookSection"),g("cancelSaleMenuItem","cancelSaleSection"),g("cancelRentMenuItem","cancelRentSection"),g("refundBookMenuItem","refundBookSection"),g("rentNow","rentBookSection");const b=document.getElementById("add-book-form");null!=b&&(b.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(b),n=o.get("bookTitle"),r=o.get("bookAuthor"),s=o.get("bookIsbn"),c=o.get("bookPublishYear"),l=o.get("bookPages"),u=o.get("bookPrice"),d=new a.BookPrice;d.price=u;const h=new i.Book(s,n,r,c,l,d);if(!1===e.bookService.bookList.some((t=>t.isbn===h.isbn)))return(yield e.bookService.createBook(h))?(alert(h.isbn+" numaralı kitap Ekleme İşlemi Başarı İle Tamamlanmıştır."),b.reset(),N()):alert(h.isbn+" numaralı kitap Ekleme İşlemi Sırasında Bir Hata oluştu."),!1;alert("Aynı ISBN numrasına sahip ikinci bir kitap eklenemz.")})));const S=document.getElementById("add-stock-form");S&&(S.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(S),n=o.get("bookIsbnForAddStock"),r=o.get("stockQuantity"),i=o.get("shelfNumber"),a=e.bookService.bookList.find((t=>t.isbn===n));if(a){const t=new u.Stock(r,i,a);(yield e.stockService.createStock(t))&&(alert(n+" isbn numaralı kitaptan, "+r+" kadar sisteme stok eklenmiştir."),yield v(),yield N())}else alert("Stok eklenmeye çalışılan kitaba ait isbn numarası hatalıdır.");return S.reset(),!1})));const _=document.getElementById("add-customer-form");_&&(_.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(_),n=o.get("customerName"),r=o.get("customerSurname"),i=o.get("customerPhoneNumber"),a=new s.Customer(n,r,i);return(yield e.customerService.addCustomerMock(a))?(alert("Müşteri Ekleme İşlemi Başarı İle Tamamlanmıştır. "),_.reset()):alert("Müşteri Ekleme İşlemi Sırasında bir hata ile karşılıldı. "),!1})));const C=document.getElementById("sale-book-form");C&&(C.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(C),n=o.get("isbnForSale"),r=e.bookService.getBook(n),i=parseInt(o.get("customerIdForSale")),a=parseInt(o.get("quantityForSale"));let s=yield e.stockService.getStockByBookId(r.id);try{return r?s?s.quantity>=a?e.saleService.addBookToCart(r,a,i):alert(a+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${n} numaralı kitabın stoğu mevcut değildir.`):alert(n+" numaralı kitap yoktur."),C.reset(),!1}catch(t){alert(t)}}))),document.getElementById("btnSale").addEventListener("click",(()=>{0===e.saleService.saleCart.orderBookItems.length?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):e.saleService.cartToSale()})),document.getElementById("showBooksMenuItem").addEventListener("click",(()=>{N()}));const B=document.getElementById("cancel-sale-form");B&&(B.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(B).get("saleNumberforCancel");!0===(yield e.saleService.isExistSale(o))?(yield e.cancelService.cancelSaleMock(o))?alert(o+" numaralı satış iptal edilmiştir."):alert(o+" numaralı satış iptal edilirken hata meydana geldi."):alert(o+" numaralı satış bulunamamıştır. Tekrar deneyiniz.")})));const w=document.getElementById("cancel-rent-form");w&&(w.onsubmit=t=>n(void 0,void 0,void 0,(function*(){t.preventDefault();const o=new FormData(w).get("rentNumberforCancel");(yield e.cancelService.cancelRentMock(o))?alert(o+" numaralı kiralama iptal edilmiştir."):alert(o+" numaralı kiralma bulunamamıştır. Tekrar deneyiniz.")})));const I=document.getElementById("rent-book-form");I&&(I.onsubmit=()=>n(void 0,void 0,void 0,(function*(){const t=new FormData(I),o=t.get("isbnForRent"),n=e.bookService.getBook(o),r=parseInt(t.get("customerIdForRent")),i=parseInt(t.get("quantityForRent")),a=yield e.stockService.getStockByBookId(n.id);try{return n?a?a.quantity>=i?e.rentService.addBookToCart(n,i,r):alert(i+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${o} numaralı kitabın stoğu mevcut değildir. Önce stok ekleyiniz`):alert(o+" numaralı kitap yoktur."),I.reset(),!1}catch(t){alert(t)}}))),document.getElementById("btnRent").addEventListener("click",(()=>{0===e.rentService.rentCart.orderBookItems.length?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):e.rentService.cartToRent()}));const D=document.getElementById("refund-book-form");function N(){return n(this,void 0,void 0,(function*(){e.bookService.bookList=yield e.bookService.getAllBooksData(),e.stockService.stockList=yield e.stockService.getAllStocksData();const t=document.getElementById("listBooks");if(t){let o,n;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);e.bookService.bookList.forEach((r=>{o=document.createElement("div"),o.className="row-list-book",n=document.createElement("div"),n.className="column-list-book",n.textContent=r.isbn.toString(),o.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=r.name.toString(),o.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=r.author.toString(),o.appendChild(n),n=document.createElement("div"),n.className="column-list-book";let i=0;!0===e.stockService.stockList.some((t=>t.book.id===r.id))&&(i=e.stockService.stockList.find((t=>t.book.id===r.id)).quantity),n.textContent=i.toString(),o.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=r.bookPrice.price.toString()+" ₺",o.appendChild(n),t.appendChild(o)}))}}))}D&&(D.onsubmit=t=>n(void 0,void 0,void 0,(function*(){let o=new Array;o.push(new l.OrderBookItems(e.bookService.getBook("123-45"),3));let n=new Date;n.setDate(n.getDate()+23);let r=new c.Rent(o,new Date,1,"R021122163045",123,n,0);r.refund=e.rentService.calculateRefundAmount(r),e.rentService.rentList.push(r),t.preventDefault();const i=new FormData(D).get("rentNumberforRefund");let a=e.rentService.getRent(i);if(a){let t=yield e.rentService.refundRentMock(a);t?(alert(a.operationNumber+" numaralı kiralama geri alınmıştır."),alert("Geri ödeme miktarı:"+t+" ₺ .")):alert(a.operationNumber+" numaralı kiralama iptal edilirken hata meydana geldi.")}else alert(i+" numaralı kiralama bulunamamıştır. Tekrar deneyiniz.")})))},946:function(t,e){var o=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BookService=void 0,e.BookService=class{constructor(t,e){this.bookApi="http://localhost:3002/api/v1/books",this._bookList=t,this._bookSpecification=e}get bookList(){return this._bookList}get bookSpecification(){return this._bookSpecification}set bookList(t){this._bookList=t}set bookSpecification(t){this._bookSpecification=t}getBook(t){return this.bookList.find((e=>e.isbn===t))}getAllBooksData(){return o(this,void 0,void 0,(function*(){const t=yield fetch(this.bookApi,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);const e=yield t.json();return JSON.parse(JSON.stringify(e,null,4))}))}createBook(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.bookApi,{method:"POST",body:JSON.stringify({isbn:t.isbn,name:t.name,author:t.author,pages:t.pages,publishYear:t.publishYear,bookPriceCreateDto:{price:t.bookPrice.price}}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log("Rest servisinden dönen cevap =>"),console.log(t),this.bookList=yield this.getAllBooksData(),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},943:function(t,e){var o=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CancelService=void 0,e.CancelService=class{constructor(t){this.cancelSaleApi="http://localhost:3002/api/v1/sales",this.cancelRentApi="http://localhost:3002/api/v1/rents",this._cancelledList=t}get cancelledList(){return this._cancelledList}set cancelledList(t){this._cancelledList=t}calculateDiffHours(t,e){let o=t.getTime()-e.getTime();return Math.floor(o/1e3/60/60)}cancelSale(t){let e=this.calculateCancelSaleRefund(t);t.refund=e,this.cancelledList.push(t)}calculateCancelSaleRefund(t){let e;return e=this.calculateDiffHours(t.canceledDateTime,t.cancelType.operationDateTime)>24?.75*t.cancelType.total:t.cancelType.total,e}cancelSaleMock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.cancelSaleApi+"/"+t,{method:"DELETE",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok)return console.log(e),!0;throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}cancelRent(t){let e=this.calculateCancelRentRefund(t);t.refund=e,this.cancelledList.push(t)}calculateCancelRentRefund(t){let e;return e=this.calculateDiffHours(t.canceledDateTime,t.cancelType.operationDateTime)>24?.75*t.cancelType.total:t.cancelType.total,e}cancelRentMock(t){return o(this,void 0,void 0,(function*(){const e=yield fetch(this.cancelRentApi+"/"+t,{method:"DELETE",headers:{"Content-Type":"application/json",Accept:"application/json"}});return!!e.ok&&(console.log(e),!0)}))}}},709:function(t,e){var o=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CustomerService=void 0,e.CustomerService=class{constructor(t){this.customerApi="http://localhost:3002/api/v1/customers",this._customerList=t}get customerList(){return this._customerList}set customerList(t){this._customerList=t}addCustomer(t){this.customerList.push(t)}addCustomerMock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.customerApi,{method:"POST",body:JSON.stringify({name:t.name,surName:t.surName,phoneNumber:t.phoneNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log("Rest servisinden dönen cevap =>"),console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},148:function(t,e,o){var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.RentService=void 0;const r=o(607),i=o(961),a=o(758),s=o(767);e.RentService=class{constructor(t,e){this.rentApi="http://localhost:3002/api/v1/rents",this._rentList=t,this.refundPercent=.75,this._rentCart=e}get rentList(){return this._rentList}set rentList(t){this._rentList=t}get rentCart(){return this._rentCart}set rentCart(t){this._rentCart=t}addRent(t){this.rentList.push(t)}calculateTotal(t){let e=0;for(let o of t.orderBookItems)e+=o.book.bookPrice.price*o.quantity;return e}generateRentNumber(t){let e=new Date;return"R"+e.getDay().toString()+e.getMonth().toString()+e.getFullYear().toString()+e.getHours().toString()+e.getMinutes().toString()+e.getSeconds().toString()+t.toString()}calculateDiffHours(t,e){let o=t.getTime()-e.getTime();return Math.floor(o/1e3/60/60)}calculateRefund(t){t.refund=t.total*this.refundPercent}calculateRefundAmount(t){let e,o=this.calculateDiffHours(t.refundDate,t.operationDateTime)/24;if(o<=14)e=.75*t.total;else if(o<=24){let n=.75-.05*(o-14);e=t.total*n}else e=.25*t.total;return e}getRent(t){return this.rentList.find((e=>e.operationNumber===t))}addBookToCart(t,e,o){if(0===this.rentCart.orderBookItems.length)this.rentCart.customerId=o;else if(this.rentCart.orderBookItems.length>0&&this.rentCart.customerId!==o)return alert("Farklı müşteriye kitap kiralanmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;this.rentCart.orderBookItems.push(new s.OrderBookItems(t,e)),this.updateRentCart()}updateRentCart(){const t=document.getElementById("rentCart"),e=document.getElementById("totalRentAmountTl");if(t){let o,n,r=0;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);e.textContent="";for(let t=0;t<this.rentCart.orderBookItems.length;t++){o=document.createElement("div"),o.className="rent-cart-row";for(let t of this.rentCart.orderBookItems)n=document.createElement("div"),n.className="rent-cart-column",n.textContent=this.rentCart.customerId.toString(),o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=t.book.name,o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=t.quantity.toString(),o.appendChild(n),n=document.createElement("div"),n.className="rent-cart-column",n.textContent=(t.book.bookPrice.price*t.quantity).toString(),o.appendChild(n)}if(o&&e){for(let t of this.rentCart.orderBookItems)r+=t.book.bookPrice.price*t.quantity;t.appendChild(o),e.textContent=r.toString()+" TL"}}}cartToRent(){return n(this,void 0,void 0,(function*(){let t=this.rentCart,e=new i.Rent;e.orderBookItems=t.orderBookItems,e.customerId=t.customerId,e.operationNumber=this.generateRentNumber(t.customerId),e.operationDateTime=new Date,e.total=this.calculateTotal(e);let o=new Date;o.setDate(o.getDate()+14),e.refundDate=o,this.calculateRefund(e);for(let t of e.orderBookItems)yield r.stockService.getStockByBookId(t.book.id);this.rentCart=new a.RentCart,this.updateRentCart(),this.addRentMock(e)}))}addRentMock(t){return n(this,void 0,void 0,(function*(){try{const e=yield fetch(this.rentApi,{method:"POST",body:JSON.stringify({orderBookItems:Array.from(t.orderBookItems),customerId:t.customerId,operationDateTime:t.operationDateTime,operationNumber:t.operationNumber,total:t.total,refundDate:t.refundDate,refund:t.refund}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);{const o=yield e.json();console.log("Rest apidan dönen cevap:\n"),console.log(o),alert("Kitap kiralama işlemi başarıyla gerçekleşmiştir."),alert("Fişinizi kaybetneyiniz. Fiş numaranız: "+t.operationNumber)}}catch(t){console.log("Hata Oluştu."),alert("Kitap kiralama işlemi sırasında bir hata oluştu. Lütfen tekrar deneyiniz.")}}))}refundRentMock(t){return n(this,void 0,void 0,(function*(){try{const e=yield fetch(this.rentApi+"/"+t.operationNumber,{method:"PATCH",body:JSON.stringify({refundDate:t.refundDate,refund:t.refund}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const o=yield e.json();return console.log(o),t.refund}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},478:function(t,e,o){var n=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.SaleService=void 0;const r=o(607),i=o(354),a=o(767),s=o(51);e.SaleService=class{constructor(t,e){this.saleApi="http://localhost:3002/api/v1/sales",this._saleList=t,this._saleCart=e}get saleList(){return this._saleList}set saleList(t){this._saleList=t}get saleCart(){return this._saleCart}set saleCart(t){this._saleCart=t}addSale(t){this.saleList.push(t)}calculateTotal(t){let e=0;for(let o of t.orderBookItems)e+=o.book.bookPrice.price*o.quantity;return e}generateSaleNumber(t){let e=new Date;return"S"+e.getDay().toString()+e.getMonth().toString()+e.getFullYear().toString()+e.getHours().toString()+e.getMinutes().toString()+e.getSeconds().toString()+t.toString()}getSale(t){return this.saleList.find((e=>e.operationNumber===t))}removeSale(t){let e=this.saleList.indexOf(t);this.saleList.splice(e,1)}addBookToCart(t,e,o){if(0===this.saleCart.orderBookItems.length)this.saleCart.customerId=o;else if(this.saleCart.orderBookItems.length>0&&this.saleCart.customerId!==o)return alert("Farklı müşteriye kitap satılmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;let n=new a.OrderBookItems(t,e);this.saleCart.orderBookItems.push(n),this.updateSaleCart()}updateSaleCart(){const t=document.getElementById("saleCart"),e=document.getElementById("totalSaleAmountTl");if(t){let o,n,r=0;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);e.textContent="";for(let t=0;t<this.saleCart.orderBookItems.length;t++){o=document.createElement("div"),o.className="sale-cart-row";for(let t of this.saleCart.orderBookItems)n=document.createElement("div"),n.className="sale-cart-column",n.textContent=this.saleCart.customerId.toString(),o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=t.book.name,o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=t.quantity.toString(),o.appendChild(n),n=document.createElement("div"),n.className="sale-cart-column",n.textContent=(t.book.bookPrice.price*t.quantity).toString(),o.appendChild(n)}if(o&&e){for(let t of this.saleCart.orderBookItems)r+=t.book.bookPrice.price*t.quantity;t.appendChild(o),e.textContent=r.toString()+" TL"}}}cartToSale(){return n(this,void 0,void 0,(function*(){let t=this.saleCart,e=new i.Sale;e.orderBookItems=t.orderBookItems,e.customerId=t.customerId,e.operationNumber=this.generateSaleNumber(t.customerId),e.operationDateTime=new Date,e.total=this.calculateTotal(e);for(let t of e.orderBookItems)yield r.stockService.getStockByBookId(t.book.id);let o=this.createSale(e);return this.saleCart=new s.SaleCart,this.updateSaleCart(),o}))}createSale(t){return n(this,void 0,void 0,(function*(){try{const e=yield fetch(this.saleApi,{method:"POST",body:JSON.stringify({orderBookItems:Array.from(t.orderBookItems),customerId:t.customerId,operationDateTime:t.operationDateTime,operationNumber:t.operationNumber,total:t.total}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(console.log(e),e.ok){const o=yield e.json();return console.log("Rest apidan dönen cevap:\n"),console.log(o),alert("Kitap satış işlemi başarıyla gerçekleşmiştir."),alert("Fişinizi kaybetmeyiniz. Fiş Numarası: "+t.operationNumber),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}isExistSale(t){return n(this,void 0,void 0,(function*(){const e=yield fetch(this.saleApi+"/"+t,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(console.log(e),e.ok){const t=yield e.json();return console.log("Rest apidan dönen cevap:\n"),console.log(t),!0}return!1}))}}},214:function(t,e){var o=this&&this.__awaiter||function(t,e,o,n){return new(o||(o=Promise))((function(r,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.StockService=void 0,e.StockService=class{constructor(t){this.stockApi="http://localhost:3002/api/v1/stocks",this._stockList=t}get stockList(){return this._stockList}set stockList(t){this._stockList=t}getStockByBookId(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.stockApi+"/q/"+t,{method:"GET",headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok)return yield e.json();throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){return t instanceof Error?console.log("error message: ",t.message):console.log("unexpected error: ",t),null}}))}createStock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.stockApi,{method:"POST",body:JSON.stringify({quantity:t.quantity,shelfNumber:t.shelfNumber,book:t.book}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu."+t)}}))}getAllStocksData(){return o(this,void 0,void 0,(function*(){const t=yield fetch(this.stockApi,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);const e=yield t.json();return JSON.parse(JSON.stringify(e,null,4))}))}increaseStockMock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.stockApi+"/"+t.id,{method:"PUT",body:JSON.stringify({quantity:t.quantity,shelfNumber:t.shelfNumber,book:t.book}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const o=yield e.json();console.log(o),console.log(e.status)}catch(t){console.log("Hata Oluştu.")}}))}}}},e={};!function o(n){var r=e[n];if(void 0!==r)return r.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,o),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,