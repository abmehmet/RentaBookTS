(()=>{"use strict";var t={221:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DataBase=void 0;const o=n(758),a=n(51);e.DataBase=class{constructor(){this._books=new Array,this._stocks=new Array,this._customers=new Array,this._sales=new Array,this._rents=new Array,this._bookSpecifications=new Array,this._cancels=new Array,this._saleCart=new a.SaleCart,this._rentCart=new o.RentCart}get getBooksList(){return this._books}get getStocksList(){return this._stocks}get getCustomersList(){return this._customers}get getSalesList(){return this._sales}get getRents(){return this._rents}get getBookSpecifications(){return this._bookSpecifications}get getCancaledSales(){return this._cancels}get getSaleCart(){return this._saleCart}get getRentCart(){return this._rentCart}set setSaleCart(t){this._saleCart=t}set setRentCart(t){this._rentCart=t}}},39:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BookSpecification=void 0,e.BookSpecification=class{constructor(t,e,n,o){this._isbn=t,this._price=e,this._startDate=n,this._endDate=o}get isbn(){return this._isbn}get price(){return this._price}get startDate(){return this._startDate}get endDate(){return this._endDate}set isbn(t){this._isbn=t}set price(t){this._price=t}set startDate(t){this._startDate=t}set endDate(t){this._endDate=t}}},934:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Book=void 0,e.Book=class{constructor(t,e,n,o,a,i){this._name=e,this._author=n,this._isbn=t,this._publishYear=o,this._pages=a,this._bookSpecification=i}get isbn(){return this._isbn}get name(){return this._name}get author(){return this._author}get publishYear(){return this._publishYear}get pages(){return this._pages}get bookSpecification(){return this._bookSpecification}set isbn(t){this._isbn=t}set name(t){this._name=t}set author(t){this._author=t}set publishYear(t){this._publishYear=t}set pages(t){this._pages=t}set bookSpecification(t){this._bookSpecification=t}}},378:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Cancel=void 0,e.Cancel=class{constructor(t,e,n){this._cancelType=t,this._refund=e,this._canceledDateTime=n}get cancelType(){return this._cancelType}get refund(){return this._refund}get canceledDateTime(){return this._canceledDateTime}set cancelType(t){this._cancelType=t}set refund(t){this._refund=t}set canceledDateTime(t){this._canceledDateTime=t}}},916:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Customer=void 0,e.Customer=class{constructor(t,e,n){this._name=t,this._surName=e,this._phoneNumber=n}get name(){return this._name}get surName(){return this._surName}get phoneNumber(){return this._phoneNumber}set name(t){this._name=t}set surName(t){this._surName=t}set phoneNumber(t){this._phoneNumber=t}}},758:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RentCart=void 0,e.RentCart=class{constructor(){this.bookAndQuantityMap=new Map}}},961:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Rent=void 0;const o=n(354);class a extends o.Sale{constructor(t,e,n,o,a,i,r){super(t,e,n,o,a),this._refundDate=i,this._refund=r}get refundDate(){return this._refundDate}get refund(){return this._refund}set refundDate(t){this._refundDate=t}set refund(t){this._refund=t}}e.Rent=a},51:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SaleCart=void 0,e.SaleCart=class{constructor(){this.bookAndQuantityMap=new Map}}},354:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Sale=void 0,e.Sale=class{constructor(t,e,n,o,a){this._bookAndQuantityMap=new Map,this._bookAndQuantityMap=t,this._operationDateTime=e,this._customerId=n,this._operationNumber=o,this._total=a}get bookAndQuantityMap(){return this._bookAndQuantityMap}get operationDateTime(){return this._operationDateTime}get customerId(){return this._customerId}get operationNumber(){return this._operationNumber}get total(){return this._total}set bookAndQuantityMap(t){this._bookAndQuantityMap=t}set operationDateTime(t){this._operationDateTime=t}set customerId(t){this._customerId=t}set operationNumber(t){this._operationNumber=t}set total(t){this._total=t}}},72:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Stock=void 0,e.Stock=class{constructor(t,e,n){this._isbn=t,this._quantity=e,this._shelfNumber=n}get isbn(){return this._isbn}get quantity(){return this._quantity}get shelfNumber(){return this._shelfNumber}set isbn(t){this._isbn=t}set quantity(t){this._quantity=t}set shelfNumber(t){this._shelfNumber=t}}},607:function(t,e,n){var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(a,i){function r(t){try{c(o.next(t))}catch(t){i(t)}}function s(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,s)}c((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.stockService=e.saleService=e.rentService=e.cancelService=e.customerService=e.bookService=void 0;const a=n(221),i=n(934),r=n(39),s=n(378),c=n(916),l=n(961),u=n(354),d=n(72),h=n(946),m=n(943),p=n(709),k=n(148),f=n(478),b=n(214);function S(t,e){const n=document.getElementById(e),o=document.getElementById(t);n&&o&&o.addEventListener("click",(()=>{"none"===n.style.display?n.style.display="block":n.style.display="none"}))}var y;y=new a.DataBase,e.bookService=new h.BookService(y.getBooksList,y.getBookSpecifications),e.customerService=new p.CustomerService(y.getCustomersList),e.cancelService=new m.CancelService(y.getCancaledSales),e.rentService=new k.RentService(y.getRents,y.getRentCart),e.saleService=new f.SaleService(y.getSalesList,y.getSaleCart),e.stockService=new b.StockService(y.getStocksList),console.log("Services intiliazed."),e.customerService.addCustomer(new c.Customer("","","")),e.customerService.addCustomer(new c.Customer("","","")),e.stockService.addStock("123-45","A45-52",10),e.stockService.addStock("123-46","A45-52",10),function(){o(this,void 0,void 0,(function*(){yield e.bookService.initializeDataMock()}))}(),S("addBookMenuItem","addBookSection"),S("showBooksMenuItem","listBooksSection"),S("addCustomerMenuItem","addCustomerSection"),S("addStockMenuItem","addStockSection"),S("saleBookMenuItem","saleBookSection"),S("rentBookMenuItem","rentBookSection"),S("cancelSaleMenuItem","cancelSaleSection"),S("cancelRentMenuItem","cancelRentSection"),S("refundBookMenuItem","refundBookSection"),S("rentNow","rentBookSection");const g=document.getElementById("add-book-form");null!=g&&(g.onsubmit=t=>o(void 0,void 0,void 0,(function*(){t.preventDefault();const n=new FormData(g),o=n.get("bookTitle"),a=n.get("bookAuthor"),s=n.get("bookIsbn"),c=n.get("bookPublishYear"),l=n.get("bookPages"),u=n.get("bookPrice"),d=new Date,h=new Date("Dec 31, 9999 23:59:59");o.match("");const m=new r.BookSpecification(s,u,d,h),p=new i.Book(s,o,a,c,l,m);return(yield e.bookService.addBookMock(p))?(alert(p.isbn+" numaralı kitap Ekleme İşlemi Başarı İle Tamamlanmıştır."),g.reset()):alert(p.isbn+" numaralı kitap Ekleme İşlemi Sırasında Bir Hata oluştu."),!1})));const v=document.getElementById("add-stock-form");v&&(v.onsubmit=t=>o(void 0,void 0,void 0,(function*(){t.preventDefault();const n=new FormData(v),o=n.get("bookIsbnForAddStock"),a=n.get("stockQuantity"),i=n.get("shelfNumber"),r=new d.Stock(o,a,i);return e.bookService.bookList.some((t=>t.isbn==o))?(yield e.stockService.addStockMock(r))&&alert(o+" isbn numaralı kitaptan, "+a+" kadar sisteme stok eklenmiştir."):alert("Stok eklenmeye çalışılan kitap, kayıtlı değildir. Lütfen önce kitap ekleyiniz"),v.reset(),!1})));const _=document.getElementById("add-customer-form");_&&(_.onsubmit=t=>o(void 0,void 0,void 0,(function*(){t.preventDefault();const n=new FormData(_),o=n.get("customerName"),a=n.get("customerSurname"),i=n.get("customerPhoneNumber"),r=new c.Customer(o,a,i);return(yield e.customerService.addCustomerMock(r))?(alert("Müşteri Ekleme İşlemi Başarı İle Tamamlanmıştır. "),_.reset()):alert("Müşteri Ekleme İşlemi Sırasında bir hata ile karşılıldı. "),!1})));const C=document.getElementById("sale-book-form");C&&(C.onsubmit=()=>{const t=new FormData(C),n=t.get("isbnForSale"),o=e.bookService.getBook(n),a=parseInt(t.get("customerIdForSale")),i=parseInt(t.get("quantityForSale")),r=e.stockService.getStock(n);try{return o?r?r.quantity>=i?e.saleService.addBookToCart(o,i,a):alert(i+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${n} numaralı kitabın stoğu mevcut değildir.`):alert(n+" numaralı kitap yoktur."),C.reset(),!1}catch(t){alert(t)}}),document.getElementById("btnSale").addEventListener("click",(()=>{0===e.saleService.saleCart.bookAndQuantityMap.size?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):e.saleService.cartToSale()})),document.getElementById("showBooksMenuItem").addEventListener("click",(()=>{e.bookService.listBooks()}));const w=document.getElementById("cancel-sale-form");w&&(w.onsubmit=t=>o(void 0,void 0,void 0,(function*(){t.preventDefault();let n=new Map;n.set(e.bookService.getBook("123-45"),3);let o=new u.Sale(n,new Date,1,"S021122163045",123);e.saleService.saleList.push(o);const a=new FormData(w).get("saleNumberforCancel");let i=e.saleService.getSale(a);if(i){let t=new s.Cancel(i,i.total,new Date);(yield e.cancelService.cancelSaleMock(t))?alert(i.operationNumber+" numaralı satış iptal edilmiştir."):alert(i.operationNumber+" numaralı satış iptal edilirken hata meydana geldi.")}else alert(a+" numaralı satış bulunamamıştır. Tekrar deneyiniz.")})));const M=document.getElementById("cancel-rent-form");M&&(M.onsubmit=t=>o(void 0,void 0,void 0,(function*(){t.preventDefault();let n=new Map;n.set(e.bookService.getBook("123-45"),3);let o=new Date;o.setDate(o.getDate()+14);let a=new l.Rent(n,new Date,1,"R021122163045",123,o,200);e.rentService.rentList.push(a);const i=new FormData(M).get("rentNumberforCancel");let r=e.rentService.getRent(i);if(r){let t=new s.Cancel(r,r.total,new Date);(yield e.cancelService.cancelRentMock(t))?alert(r.operationNumber+" numaralı kiralama iptal edilmiştir."):alert(r.operationNumber+" numaralı kiralama iptal edilirken hata meydana geldi.")}else alert(i+" numaralı kiralma bulunamamıştır. Tekrar deneyiniz.")})));const D=document.getElementById("rent-book-form");D&&(D.onsubmit=()=>{const t=new FormData(D),n=t.get("isbnForRent"),o=e.bookService.getBook(n),a=parseInt(t.get("customerIdForRent")),i=parseInt(t.get("quantityForRent")),r=e.stockService.getStock(n);try{return o?r?r.quantity>=i?e.rentService.addBookToCart(o,i,a):alert(i+" kadar kitap dükkanda mevcut değildir."):alert(`Dükkanda ${n} numaralı kitabın stoğu mevcut değildir.`):alert(n+" numaralı kitap yoktur."),D.reset(),!1}catch(t){alert(t)}}),document.getElementById("btnRent").addEventListener("click",(()=>{0===e.rentService.rentCart.bookAndQuantityMap.size?alert("Sepette ürün yok. Lütfen önce ürün ekleyiniz"):e.rentService.cartToRent()}));const N=document.getElementById("refund-book-form");N&&(N.onsubmit=t=>o(void 0,void 0,void 0,(function*(){let n=new Map;n.set(e.bookService.getBook("123-45"),3);let o=new Date;o.setDate(o.getDate()+23);let a=new l.Rent(n,new Date,1,"R021122163045",123,o,0);a.refund=e.rentService.calculateRefundAmount(a),e.rentService.rentList.push(a),t.preventDefault();const i=new FormData(N).get("rentNumberforRefund");let r=e.rentService.getRent(i);if(r){let t=yield e.rentService.refundRentMock(r);t?(alert(r.operationNumber+" numaralı kiralama geri alınmıştır."),alert("Geri ödeme miktarı:"+t+" ₺ .")):alert(r.operationNumber+" numaralı kiralama iptal edilirken hata meydana geldi.")}else alert(i+" numaralı kiralama bulunamamıştır. Tekrar deneyiniz.")})))},946:function(t,e,n){var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(a,i){function r(t){try{c(o.next(t))}catch(t){i(t)}}function s(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,s)}c((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.BookService=void 0;const a=n(607);e.BookService=class{constructor(t,e){this.bookApi="http://localhost:3002/api/v1/books",this._bookList=t,this._bookSpecification=e}get bookList(){return this._bookList}get bookSpecification(){return this._bookSpecification}set bookList(t){this._bookList=t}set bookSpecification(t){this._bookSpecification=t}getBook(t){return this.bookList.find((e=>e.isbn===t))}addBook(t){try{this.bookList.push(t),this.bookSpecification.push(t.bookSpecification)}catch(t){console.log("Kitap eklenirken bir hata meydana geldi.")}}isValidBook(t){const e=this.getBook(t);return this.bookList.includes(e)}initializeDataMock(){return o(this,void 0,void 0,(function*(){try{const t=yield fetch(this.bookApi,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Hata oluştu, hata kodu: ${t.status} `);const e=yield t.json(),n=JSON.parse(JSON.stringify(e,null,4));this.bookList=n,console.log(this.bookList)}catch(t){console.error(t)}}))}listBooks(){const t=document.getElementById("listBooks");if(t){let e,n;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);this.bookList.forEach((o=>{e=document.createElement("div"),e.className="row-list-book",n=document.createElement("div"),n.className="column-list-book",n.textContent=o.isbn.toString(),e.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=o.name.toString(),e.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=o.author.toString(),e.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=a.stockService.getStockQuantity(o.isbn).toString(),e.appendChild(n),n=document.createElement("div"),n.className="column-list-book",n.textContent=o.bookSpecification.price.toString()+" ₺",e.appendChild(n),t.appendChild(e)}))}}addBookMock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.bookApi,{method:"POST",body:JSON.stringify({isbn:t.isbn,name:t.name,author:t.author,pages:t.pages,publishYear:t.publishYear,bookSpecification:{isbn:t.bookSpecification.isbn,price:t.bookSpecification.price,startDate:t.bookSpecification.startDate,endDate:t.bookSpecification.endDate}}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log("Rest servisinden dönen cevap =>"),console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},943:function(t,e){var n=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(a,i){function r(t){try{c(o.next(t))}catch(t){i(t)}}function s(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,s)}c((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CancelService=void 0,e.CancelService=class{constructor(t){this.cancelSaleApi="http://localhost:3002/api/cancelSale",this.cancelRentApi="http://localhost:3002/api/cancelRent",this._cancelledList=t}get cancelledList(){return this._cancelledList}set cancelledList(t){this._cancelledList=t}calculateDiffHours(t,e){let n=t.getTime()-e.getTime();return Math.floor(n/1e3/60/60)}cancelSale(t){let e=this.calculateCancelSaleRefund(t);t.refund=e,this.cancelledList.push(t)}calculateCancelSaleRefund(t){let e;return e=this.calculateDiffHours(t.canceledDateTime,t.cancelType.operationDateTime)>24?.75*t.cancelType.total:t.cancelType.total,e}cancelSaleMock(t){return n(this,void 0,void 0,(function*(){let e=this.calculateCancelSaleRefund(t);t.refund=e;try{const e=yield fetch(this.cancelSaleApi,{method:"POST",body:JSON.stringify({sale:t.cancelType,refund:t.refund,canceledDateTime:t.canceledDateTime}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}cancelRent(t){let e=this.calculateCancelRentRefund(t);t.refund=e,this.cancelledList.push(t)}calculateCancelRentRefund(t){let e;return e=this.calculateDiffHours(t.canceledDateTime,t.cancelType.operationDateTime)>24?.75*t.cancelType.total:t.cancelType.total,e}cancelRentMock(t){return n(this,void 0,void 0,(function*(){let e=this.calculateCancelRentRefund(t);t.refund=e;try{const e=yield fetch(this.cancelRentApi,{method:"POST",body:JSON.stringify({rent:t.cancelType,refund:t.refund,canceledDateTime:t.canceledDateTime}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},709:function(t,e){var n=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(a,i){function r(t){try{c(o.next(t))}catch(t){i(t)}}function s(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,s)}c((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.CustomerService=void 0,e.CustomerService=class{constructor(t){this.customerApi="http://localhost:3002/api/v1/customers",this._customerList=t}get customerList(){return this._customerList}set customerList(t){this._customerList=t}addCustomer(t){this.customerList.push(t)}addCustomerMock(t){return n(this,void 0,void 0,(function*(){try{const e=yield fetch(this.customerApi,{method:"POST",body:JSON.stringify({name:t.name,surName:t.surName,phoneNumber:t.phoneNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log("Rest servisinden dönen cevap =>"),console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},148:function(t,e,n){var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(a,i){function r(t){try{c(o.next(t))}catch(t){i(t)}}function s(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,s)}c((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.RentService=void 0;const a=n(607),i=n(961),r=n(758);e.RentService=class{constructor(t,e){this.rentApi="http://localhost:3002/api/rents",this._rentList=t,this.refundPercent=.75,this._rentCart=e}get rentList(){return this._rentList}set rentList(t){this._rentList=t}get rentCart(){return this._rentCart}set rentCart(t){this._rentCart=t}addRent(t){this.rentList.push(t)}calculateTotal(t){t.bookAndQuantityMap;let e=0;for(let n of t.bookAndQuantityMap)e+=n[0].bookSpecification.price*n[1];return e}generateRentNumber(t){let e=new Date;return"R"+e.getDay().toString+e.getMonth().toString+e.getFullYear().toString+e.getHours().toString+e.getMinutes().toString+e.getSeconds().toString+t.toString}calculateDiffHours(t,e){let n=t.getTime()-e.getTime();return Math.floor(n/1e3/60/60)}calculateRefund(t){t.refund=t.total*this.refundPercent}calculateRefundAmount(t){let e,n=this.calculateDiffHours(t.refundDate,t.operationDateTime)/24;if(n<=14)e=.75*t.total;else if(n<=24){let o=.75-.05*(n-14);e=t.total*o}else e=.25*t.total;return e}getRent(t){return this.rentList.find((e=>e.operationNumber===t))}addBookToCart(t,e,n){if(0===this.rentCart.bookAndQuantityMap.size)this.rentCart.customerId=n;else if(this.rentCart.bookAndQuantityMap.size>0&&this.rentCart.customerId!==n)return alert("Farklı müşteriye kitap kiralanmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;this.rentCart.bookAndQuantityMap.set(t,e),this.updateRentCart()}updateRentCart(){const t=document.getElementById("rentCart"),e=document.getElementById("totalRentAmountTl");if(t){let n,o,a=0;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);e.textContent="";for(let t=0;t<this.rentCart.bookAndQuantityMap.size;t++){n=document.createElement("div"),n.className="rent-cart-row";for(let t of this.rentCart.bookAndQuantityMap.entries())o=document.createElement("div"),o.className="rent-cart-column",o.textContent=this.rentCart.customerId.toString(),n.appendChild(o),o=document.createElement("div"),o.className="rent-cart-column",o.textContent=t[0].name,n.appendChild(o),o=document.createElement("div"),o.className="rent-cart-column",o.textContent=t[1].toString(),n.appendChild(o),o=document.createElement("div"),o.className="rent-cart-column",o.textContent=(t[0].bookSpecification.price*t[1]).toString(),n.appendChild(o)}if(n&&e){for(let t of this.rentCart.bookAndQuantityMap)a+=t[0].bookSpecification.price*t[1];t.appendChild(n),e.textContent=a.toString()+" TL"}}}cartToRent(){let t=this.rentCart,e=new i.Rent;e.bookAndQuantityMap=t.bookAndQuantityMap,e.customerId=t.customerId,e.operationNumber=this.generateRentNumber(t.customerId),e.operationDateTime=new Date,e.total=this.calculateTotal(e);for(let t of e.bookAndQuantityMap)a.stockService.increaseStock(t[0].isbn,-t[1]);this.rentCart=new r.RentCart,this.updateRentCart(),this.addRentMock(e)}addRentMock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.rentApi,{method:"POST",body:JSON.stringify({bookAndQuantity:t.bookAndQuantityMap,customerId:t.customerId,operationDateTime:t.operationDateTime,operationNumber:t.operationNumber,total:t.total}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),alert(t.message+" "+t.saleNumber),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}refundRentMock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.rentApi+"/"+t.operationNumber,{method:"PATCH",body:JSON.stringify({refundDate:t.refundDate,refund:t.refund}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const n=yield e.json();return console.log(n),t.refund}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu.")}}))}}},478:function(t,e,n){var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(a,i){function r(t){try{c(o.next(t))}catch(t){i(t)}}function s(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,s)}c((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.SaleService=void 0;const a=n(607),i=n(354),r=n(51);e.SaleService=class{constructor(t,e){this.saleApi="http://localhost:3002/api/sales",this._saleList=t,this._saleCart=e}get saleList(){return this._saleList}set saleList(t){this._saleList=t}get saleCart(){return this._saleCart}set saleCart(t){this._saleCart=t}addSale(t){this.saleList.push(t)}calculateTotal(t){let e=0;for(let n of t.bookAndQuantityMap.entries())e+=n[0].bookSpecification.price*n[1];return e}generateSaleNumber(t){let e=new Date;return"S"+e.getDay().toString()+e.getMonth().toString()+e.getFullYear().toString()+e.getHours().toString()+e.getMinutes().toString()+e.getSeconds().toString()+t.toString()}getSale(t){return this.saleList.find((e=>e.operationNumber===t))}removeSale(t){let e=this.saleList.indexOf(t);this.saleList.splice(e,1)}addBookToCart(t,e,n){if(0===this.saleCart.bookAndQuantityMap.size)this.saleCart.customerId=n;else if(this.saleCart.bookAndQuantityMap.size>0&&this.saleCart.customerId!==n)return alert("Farklı müşteriye kitap satılmaya çalışılıyor. Lütfen tek müşteri için işlem yapınız"),!1;this.saleCart.bookAndQuantityMap.set(t,e),this.updateSaleCart()}updateSaleCart(){const t=document.getElementById("saleCart"),e=document.getElementById("totalSaleAmountTl");if(t){let n,o,a=0;for(;t.lastChild&&t.children.length>1;)t.removeChild(t.lastChild);e.textContent="";for(let t=0;t<this.saleCart.bookAndQuantityMap.size;t++){n=document.createElement("div"),n.className="sale-cart-row";for(let t of this.saleCart.bookAndQuantityMap.entries())o=document.createElement("div"),o.className="sale-cart-column",o.textContent=this.saleCart.customerId.toString(),n.appendChild(o),o=document.createElement("div"),o.className="sale-cart-column",o.textContent=t[0].name,n.appendChild(o),o=document.createElement("div"),o.className="sale-cart-column",o.textContent=t[1].toString(),n.appendChild(o),o=document.createElement("div"),o.className="sale-cart-column",o.textContent=(t[0].bookSpecification.price*t[1]).toString(),n.appendChild(o)}if(n&&e){for(let t of this.saleCart.bookAndQuantityMap)a+=t[0].bookSpecification.price*t[1];t.appendChild(n),e.textContent=a.toString()+" TL"}}}cartToSale(){let t=this.saleCart,e=new i.Sale;e.bookAndQuantityMap=t.bookAndQuantityMap,e.customerId=t.customerId,e.operationNumber=this.generateSaleNumber(t.customerId),e.operationDateTime=new Date,e.total=this.calculateTotal(e);for(let t of e.bookAndQuantityMap)a.stockService.increaseStock(t[0].isbn,-t[1]);this.addSaleMock(e),this.saleCart=new r.SaleCart,this.updateSaleCart()}addSaleMock(t){return o(this,void 0,void 0,(function*(){try{console.log(t.bookAndQuantityMap);const e=yield fetch(this.saleApi,{method:"POST",body:JSON.stringify({bookAndQuantity:Array.from(t.bookAndQuantityMap.entries()),customerId:t.customerId,operationDateTime:t.operationDateTime,operationNumber:t.operationNumber,total:t.total}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const n=yield e.json();console.log(n),alert(n.message+" "+n.saleNumber)}catch(t){console.log("Hata Oluştu.")}}))}}},214:function(t,e,n){var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(a,i){function r(t){try{c(o.next(t))}catch(t){i(t)}}function s(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,s)}c((o=o.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0}),e.StockService=void 0;const a=n(72);e.StockService=class{constructor(t){this.stockApi="http://localhost:3002/api/stocks",this._stockList=t}get stockList(){return this._stockList}set stockList(t){this._stockList=t}addStock(t,e,n){try{let o=new a.Stock(t,n,e);return this.stockList.push(o),!0}catch(t){return console.error(t),!1}}increaseStock(t,e){let n=this.getStock(t);return!!n&&(n.quantity=n.quantity+e,!0)}getStock(t){let e=this.stockList.find((e=>e.isbn===t));if(e)return e}getStockQuantity(t){let e=this.getStock(t);return e?e.quantity:0}addStockMock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.stockApi,{method:"POST",body:JSON.stringify({isbn:t.isbn,quantity:t.quantity,shelfNumber:t.shelfNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(e.ok){const t=yield e.json();return console.log(t),!0}throw new Error(`Hata oluştu, hata kodu: ${e.status} `)}catch(t){console.log("Hata Oluştu."+t)}}))}increaseStockMock(t){return o(this,void 0,void 0,(function*(){try{const e=yield fetch(this.stockApi+"/"+t.isbn,{method:"PUT",body:JSON.stringify({isbn:t.isbn,quantity:t.quantity,shelfNumber:t.shelfNumber}),headers:{"Content-Type":"application/json",Accept:"application/json"}});if(!e.ok)throw new Error(`Hata oluştu, hata kodu: ${e.status} `);const n=yield e.json();console.log(n),console.log(e.status)}catch(t){console.log("Hata Oluştu.")}}))}}}},e={};!function n(o){var a=e[o];if(void 0!==a)return a.exports;var i=e[o]={exports:{}};return t[o].call(i.exports,i,i.exports,n),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,